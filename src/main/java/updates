Cached methods:
Transaction getTransactionById(UUID transactionId);
List<Transaction> getTransactionsBySeller(String username);
List<Transaction> getTransactionsCompletedBetweenDates(Date from, Date to);
List<Transaction> getPendingTransactions();
List<Transaction> getTransactionByIds(Set<UUID> transactionIds);
public List<Transaction> getPendingTransactionsByUser(String userId);
public List<Transaction> getCompletedTransactionsByUser(String userId);
public Customer doSomethingAndReturnACustomer(@Key String id, String irrelevantForCaching, Boolean irrelevantBoolean)


UPDATE VERSION 1

@UpdatesCache(name="doSomethingAndReturnACustomer", keys={"id"}, targetObjectKeys=true)
public void saveCustomer(@UpdatedValue Customer transaction)

@UpdatesCache(name="getTransactionsBySeller", keys={"userId"}, targetObjectKeys=true)
@UpdatesCache(name="getTransactionById", keys={"id"}, targetObjectKeys=true)
public void saveTransaction(@UpdatedValue Transaction transaction)

@UpdatesCache(name="completedTransactionCache", keys={"userId", "isCompleted"}, targetObjectKeys=true, conditionalAdd="isCompleted", conditionalRemove="!isCompleted")
@UpdatesCache(name="pendingTransactionCache", keys={"userId", "isCompleted"}, targetObjectKeys=true, conditionalAdd="!isCompleted", conditionalRemove="isCompleted")
@UpdatesCache(name="getPendingTransactions", remove=true)
public void completeTransaction(@UpdatedValue Transaction transaction)

@UpdatesCache(name="getBySeller", keys={"sellerId"}, addIfAbsent=true)
@UpdatesCache(name="getById", fieldNameKeys={"id"}, addIfAbsent=true)
@UpdatesCache(name="getPendingTransactions", addIfAbsent=true)
public Transaction createPendingTransaction(Transaction pendingTransaction)





UPDATE VERSION 2
@UpdatesCache(name="doSomethingAndReturnACustomer", targetObjectKeys={"id"})
public void saveCustomer(@UpdatedValue Customer transaction)

@UpdatesCache(name="getTransactionsBySeller", targetObjectKeys={"userId"})
@UpdatesCache(name="getTransactionById", targetObjectKeys={"id"},)
public void saveTransaction(@UpdatedValue Transaction transaction)

@UpdatesCache(name="getBySeller", targetObjectKeys={"sellerId"}, addIfAbsent=true)
@UpdatesCache(name="getById", annotatedKeys={"id"}, addIfAbsent=true)
@UpdatesCache(name="getPendingTransactions", addIfAbsent=true)
public Transaction createPendingTransaction(@UpdateKey(name="id") UUID uuid)


@UpdatesCache(name="getTransactionsBySeller", targetObjectKeys={"userId"})
@UpdatesCache(name="completedTransactionCache", targetObjectKeys={"userId", "isCompleted"}, conditionalAdd="transaction.isCompleted", conditionalRemove="!transaction.isCompleted")
@UpdatesCache(name="pendingTransactionCache", targetObjectKeys={"userId", "isCompleted"}, conditionalAdd="!transaction.isCompleted", conditionalRemove="transaction.isCompleted")
@UpdatesCache(name="getPendingTransactions", remove=true)
public void completeTransaction(@UpdatedValue Transaction transaction)

